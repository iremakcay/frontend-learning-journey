{"ast":null,"code":"var _jsxFileName = \"/Users/iremakcay/Projects/stock/src/Chart/Chart.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Chart } from \"chart.js\";\nimport \"./Chart.css\";\n\nconst generateChartOptions = (labels, prices) => ({\n  // The type of chart we want to create\n  type: \"bar\",\n  data: {\n    labels,\n    datasets: [{\n      label: \"# of Votes\",\n      data: prices,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\"],\n      borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\"],\n      borderWidth: 1\n    }]\n  },\n  // Configuration options go here\n  options: {}\n});\n\nconst useChart = function ({\n  element,\n  prices,\n  labels\n}) {\n  const chartOptions = generateChartOptions(prices, labels);\n  const chart = new Chart(element, chartOptions);\n  useEffect(() => {}, [chart]);\n  return chart;\n};\n\nfunction ChartComponent({\n  prices,\n  labels\n}) {\n  useChart({\n    canvasElement,\n    prices,\n    labels\n  });\n  return React.createElement(\"canvas\", {\n    ref: canvasElement,\n    id: \"myChart\",\n    width: \"400\",\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n}\n\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/iremakcay/Projects/stock/src/Chart/Chart.js"],"names":["React","useRef","useEffect","Chart","generateChartOptions","labels","prices","type","data","datasets","label","backgroundColor","borderColor","borderWidth","options","useChart","element","chartOptions","chart","ChartComponent","canvasElement"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAO,aAAP;;AACA,MAAMC,oBAAoB,GAAG,CAACC,MAAD,EAASC,MAAT,MAAqB;AAChD;AACAC,EAAAA,IAAI,EAAE,KAF0C;AAGhDC,EAAAA,IAAI,EAAE;AACJH,IAAAA,MADI;AAEJI,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,YADT;AAEEF,MAAAA,IAAI,EAAEF,MAFR;AAGEK,MAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,CAHnB;AASEC,MAAAA,WAAW,EAAE,CACX,uBADW,EAEX,uBAFW,EAGX,uBAHW,EAIX,uBAJW,CATf;AAeEC,MAAAA,WAAW,EAAE;AAff,KADQ;AAFN,GAH0C;AAyBhD;AACAC,EAAAA,OAAO,EAAE;AA1BuC,CAArB,CAA7B;;AA6BA,MAAMC,QAAQ,GAAG,UAAS;AAAEC,EAAAA,OAAF;AAAWV,EAAAA,MAAX;AAAmBD,EAAAA;AAAnB,CAAT,EAAsC;AACrD,QAAMY,YAAY,GAAGb,oBAAoB,CAACE,MAAD,EAASD,MAAT,CAAzC;AACA,QAAMa,KAAK,GAAG,IAAIf,KAAJ,CAAUa,OAAV,EAAmBC,YAAnB,CAAd;AAEAf,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACgB,KAAD,CAAX,CAAT;AACA,SAAOA,KAAP;AACD,CAND;;AAQA,SAASC,cAAT,CAAwB;AAAEb,EAAAA,MAAF;AAAUD,EAAAA;AAAV,CAAxB,EAA4C;AAC1CU,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,aAAF;AAAiBd,IAAAA,MAAjB;AAAyBD,IAAAA;AAAzB,GAAD,CAAR;AAEA,SACE;AAAQ,IAAA,GAAG,EAAEe,aAAb;AAA4B,IAAA,EAAE,EAAC,SAA/B;AAAyC,IAAA,KAAK,EAAC,KAA/C;AAAqD,IAAA,MAAM,EAAC,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AAED,eAAeD,cAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Chart } from \"chart.js\";\nimport \"./Chart.css\";\nconst generateChartOptions = (labels, prices) => ({\n  // The type of chart we want to create\n  type: \"bar\",\n  data: {\n    labels,\n    datasets: [\n      {\n        label: \"# of Votes\",\n        data: prices,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\"\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\"\n        ],\n        borderWidth: 1\n      }\n    ]\n  },\n  // Configuration options go here\n  options: {}\n});\n\nconst useChart = function({ element, prices, labels }) {\n  const chartOptions = generateChartOptions(prices, labels);\n  const chart = new Chart(element, chartOptions);\n\n  useEffect(() => {}, [chart]);\n  return chart;\n};\n\nfunction ChartComponent({ prices, labels }) {\n  useChart({ canvasElement, prices, labels });\n\n  return (\n    <canvas ref={canvasElement} id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n  );\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}